{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled7.ipynb",
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyMRmTpH4f3gCu1P2szwHjmH",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AlJ95/VanPixel/blob/Jan/CNN%20from%20Scratch\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "10Xpd0p5QtHm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import PIL.Image as img\n",
        "import torch.nn as nn\n",
        "import torch\n",
        "import torch.nn.functional as F\n",
        "\n",
        "class Net(nn.Module):\n",
        "\n",
        "    def __init__(self):\n",
        "        super(Net, self).__init__()\n",
        "        # 1 input image channel, 6 output channels, 3x3 square convolution\n",
        "        # kernel\n",
        "        self.conv1 = nn.Conv2d(3, 18, 3)\n",
        "        self.conv2 = nn.Conv2d(18, 36, 3)\n",
        "        self.conv3 = nn.Conv2d(36, 54, 3)\n",
        "        self.conv4 = nn.Conv2d(54, 108, 3)\n",
        "        # an affine operation: y = Wx + b\n",
        "        self.fc1 = nn.Linear(108 * 28 * 28, 1080 * 8) \n",
        "        self.fc2 = nn.Linear(1080 * 8, 1080 * 4)\n",
        "        self.fc3 = nn.Linear(1080 * 4, 1080 * 2)\n",
        "        self.fc4 = nn.Linear(1080 * 2, 1080)\n",
        "        self.fc5 = nn.Linear(1080, 512)\n",
        "        self.fc6 = nn.Linear(512, 256)\n",
        "        self.fc7 = nn.Linear(256, 128)\n",
        "        self.fc8 = nn.Linear(128, 64)\n",
        "\n",
        "    def forward(self, x):\n",
        "        # Max pooling over a (2, 2) window\n",
        "        x = F.max_pool2d(F.relu(self.conv1(x)), (4, 3))\n",
        "        x = F.max_pool2d(F.relu(self.conv2(x)), (4, 3))\n",
        "        x = F.max_pool2d(F.relu(self.conv3(x)), (2, 2))\n",
        "        x = F.max_pool2d(F.relu(self.conv4(x)), (2, 2))\n",
        "        x = x.view(-1, self.num_flat_features(x))\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = F.relu(self.fc2(x))\n",
        "        x = F.relu(self.fc3(x))\n",
        "        x = F.relu(self.fc4(x))\n",
        "        x = F.relu(self.fc5(x))\n",
        "        x = F.relu(self.fc6(x))\n",
        "        x = F.relu(self.fc7(x))\n",
        "        x = self.fc8(x)\n",
        "        return x\n",
        "\n",
        "    def num_flat_features(self, x):\n",
        "        size = x.size()[1:]  # all dimensions except the batch dimension\n",
        "        num_features = 1\n",
        "        for s in size:\n",
        "            num_features *= s\n",
        "        return num_features\n",
        "\n",
        "\n",
        "net = Net()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3KPsdNYKfiBV",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "265d995a-d7f6-4a79-9eca-85ceb43c492b"
      },
      "source": [
        "input = torch.randn(1,3,1920,1080)\n",
        "out = net(input)\n",
        "print(out.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "torch.Size([1, 64])\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KPu6b8ZGgJQM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X8zIyGjygKQn",
        "colab_type": "text"
      },
      "source": [
        "# Neuer Abschnitt"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pn5Xy6yxR32-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "outputId": "8dc71364-13db-4ead-d432-ad562a52140b"
      },
      "source": [
        "!pip install torchviz #git+https://github.com/szagoruyko/pytorchviz\n",
        "from torchviz import make_dot\n",
        "make_dot(conv1(input))\n",
        "make_dot(conv2(conv1(input)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting torchviz\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/8f/8e/a9630c7786b846d08b47714dd363a051f5e37b4ea0e534460d8cdfc1644b/torchviz-0.0.1.tar.gz (41kB)\n",
            "\r\u001b[K     |████████                        | 10kB 16.8MB/s eta 0:00:01\r\u001b[K     |████████████████                | 20kB 1.7MB/s eta 0:00:01\r\u001b[K     |███████████████████████▉        | 30kB 2.3MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▉| 40kB 2.5MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 51kB 2.2MB/s \n",
            "\u001b[?25hRequirement already satisfied: torch in /usr/local/lib/python3.6/dist-packages (from torchviz) (1.6.0+cu101)\n",
            "Requirement already satisfied: graphviz in /usr/local/lib/python3.6/dist-packages (from torchviz) (0.10.1)\n",
            "Requirement already satisfied: future in /usr/local/lib/python3.6/dist-packages (from torch->torchviz) (0.16.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from torch->torchviz) (1.18.5)\n",
            "Building wheels for collected packages: torchviz\n",
            "  Building wheel for torchviz (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for torchviz: filename=torchviz-0.0.1-cp36-none-any.whl size=3523 sha256=98f5a2e73ee26bd7d7e325a8412966bce256f4c5221f86e1e15ad0f47a8bc8ec\n",
            "  Stored in directory: /root/.cache/pip/wheels/2a/c2/c5/b8b4d0f7992c735f6db5bfa3c5f354cf36502037ca2b585667\n",
            "Successfully built torchviz\n",
            "Installing collected packages: torchviz\n",
            "Successfully installed torchviz-0.0.1\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<graphviz.dot.Digraph at 0x7fbd30164f28>"
            ],
            "image/svg+xml": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n -->\n<!-- Title: %3 Pages: 1 -->\n<svg width=\"336pt\" height=\"171pt\"\n viewBox=\"0.00 0.00 336.00 171.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 167)\">\n<title>%3</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-167 332,-167 332,4 -4,4\"/>\n<!-- 140450532160400 -->\n<g id=\"node1\" class=\"node\">\n<title>140450532160400</title>\n<polygon fill=\"#caff70\" stroke=\"#000000\" points=\"299,-21 137,-21 137,0 299,0 299,-21\"/>\n<text text-anchor=\"middle\" x=\"218\" y=\"-7.4\" font-family=\"Times,serif\" font-size=\"12.00\" fill=\"#000000\">MkldnnConvolutionBackward</text>\n</g>\n<!-- 140452215807784 -->\n<g id=\"node2\" class=\"node\">\n<title>140452215807784</title>\n<polygon fill=\"#d3d3d3\" stroke=\"#000000\" points=\"162,-85 0,-85 0,-64 162,-64 162,-85\"/>\n<text text-anchor=\"middle\" x=\"81\" y=\"-71.4\" font-family=\"Times,serif\" font-size=\"12.00\" fill=\"#000000\">MkldnnConvolutionBackward</text>\n</g>\n<!-- 140452215807784&#45;&gt;140450532160400 -->\n<g id=\"edge1\" class=\"edge\">\n<title>140452215807784&#45;&gt;140450532160400</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M103.6228,-63.9317C126.1311,-53.4168 160.8703,-37.1883 186.1593,-25.3745\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"187.7649,-28.4876 195.3436,-21.084 184.8021,-22.1455 187.7649,-28.4876\"/>\n</g>\n<!-- 140450532315088 -->\n<g id=\"node3\" class=\"node\">\n<title>140450532315088</title>\n<polygon fill=\"#add8e6\" stroke=\"#000000\" points=\"75.5,-163 6.5,-163 6.5,-128 75.5,-128 75.5,-163\"/>\n<text text-anchor=\"middle\" x=\"41\" y=\"-135.4\" font-family=\"Times,serif\" font-size=\"12.00\" fill=\"#000000\"> (6, 1, 3, 3)</text>\n</g>\n<!-- 140450532315088&#45;&gt;140452215807784 -->\n<g id=\"edge2\" class=\"edge\">\n<title>140450532315088&#45;&gt;140452215807784</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M50.8876,-127.9494C56.6974,-117.6371 64.0522,-104.5824 70.0387,-93.9563\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"73.2091,-95.4593 75.0683,-85.0288 67.1104,-92.0234 73.2091,-95.4593\"/>\n</g>\n<!-- 140450532315032 -->\n<g id=\"node4\" class=\"node\">\n<title>140450532315032</title>\n<polygon fill=\"#add8e6\" stroke=\"#000000\" points=\"148,-163 94,-163 94,-128 148,-128 148,-163\"/>\n<text text-anchor=\"middle\" x=\"121\" y=\"-135.4\" font-family=\"Times,serif\" font-size=\"12.00\" fill=\"#000000\"> (6)</text>\n</g>\n<!-- 140450532315032&#45;&gt;140452215807784 -->\n<g id=\"edge3\" class=\"edge\">\n<title>140450532315032&#45;&gt;140452215807784</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M111.1124,-127.9494C105.3026,-117.6371 97.9478,-104.5824 91.9613,-93.9563\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"94.8896,-92.0234 86.9317,-85.0288 88.7909,-95.4593 94.8896,-92.0234\"/>\n</g>\n<!-- 140450529396720 -->\n<g id=\"node5\" class=\"node\">\n<title>140450529396720</title>\n<polygon fill=\"#add8e6\" stroke=\"#000000\" points=\"255.5,-92 180.5,-92 180.5,-57 255.5,-57 255.5,-92\"/>\n<text text-anchor=\"middle\" x=\"218\" y=\"-64.4\" font-family=\"Times,serif\" font-size=\"12.00\" fill=\"#000000\"> (16, 6, 3, 3)</text>\n</g>\n<!-- 140450529396720&#45;&gt;140450532160400 -->\n<g id=\"edge4\" class=\"edge\">\n<title>140450529396720&#45;&gt;140450532160400</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M218,-56.6724C218,-48.8405 218,-39.5893 218,-31.4323\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"221.5001,-31.2234 218,-21.2234 214.5001,-31.2235 221.5001,-31.2234\"/>\n</g>\n<!-- 140450529396776 -->\n<g id=\"node6\" class=\"node\">\n<title>140450529396776</title>\n<polygon fill=\"#add8e6\" stroke=\"#000000\" points=\"328,-92 274,-92 274,-57 328,-57 328,-92\"/>\n<text text-anchor=\"middle\" x=\"301\" y=\"-64.4\" font-family=\"Times,serif\" font-size=\"12.00\" fill=\"#000000\"> (16)</text>\n</g>\n<!-- 140450529396776&#45;&gt;140450532160400 -->\n<g id=\"edge5\" class=\"edge\">\n<title>140450529396776&#45;&gt;140450532160400</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M277.8799,-56.6724C265.9916,-47.5056 251.5816,-36.3942 239.8769,-27.3689\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"241.9633,-24.5581 231.9069,-21.2234 237.6889,-30.1015 241.9633,-24.5581\"/>\n</g>\n</g>\n</svg>\n"
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    }
  ]
}